Next steps:

* Load the schedule from a file. Create a file-based Scheduled Job Specifications List Source.

* Create a file-based Job Repository and Job Runner.
	See the Common.Gunther.JobRepository solution for construction.

* Create a GUI showing the queued jobs and that allows you to run a particular job at the touch of a button.

* Rig a production job.

The Gunther project is a scheduler, made primarily to run executable files at certain times.

The scheduler should be able to be a stand-alone GUI program that will:
	1. Display its schedule in a grid.
	2. Allow a selected item in that schedule to be run by clicking a button.
	3. Allow the "current time" of the scheduler to be changed.
	4. Display the actual time and the current time.
	5. Allow a different scheduled jobs source to be selected (file selector, or database).

The scheduler should be able to be a command-line program that will display the schedule.

The scheduler should be able to be a component in an app network, with it's information available via channel requests on the network.

MOVE:
Model:
	IScheduledJobsListSource
	IDateOperationsProvider
	IJobsRepository
	List of ScheduledTimeSpecifications

Operations:
	Get initial list of jobs and schedule each.
	Set the timer for the next job.
	For each job, if past due, reschedule, and add to IJobsRepository.
	Change the current time, re-evaluate each job for new scheduling.

Options:
	Run headless.
	Load configuration from file.

Configuration options:
	Load scheduled jobs list from file rooted path, or from database. Use late-binding to get scheduled jobs list source.
	Use jobs repository either in file or database. Use late-binding to get the jobs repository.
	Use date operations provider, late-binding.
