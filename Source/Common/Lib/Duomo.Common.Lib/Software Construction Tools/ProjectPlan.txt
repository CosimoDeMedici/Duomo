The project plan for Duomo.

Needed Components:

* Operations and pipelines.
* Model infrastructure.
* Visual operation runner.
* Runs can be serialized (operation pipeline and model).
* Operations can be e-mailed.
* Testing of operations.
* Automated check-out and build of operations.
* A better BindingList.
* IIdentifiable data framework.
* A data entity framework.
* A timeseries framework.
* Data graph framework of data sources and operations connecting them.
* Data bus for local program nodes.
* Scheduler.


*** IIdentifiable data framework ***

All rows of data have an ID number that uniquely identifies them within a namespace. The namespace is generally a class-name or database table name.
IIdentifiable is the base of all data entity rows. It has only a numeric ID of 10 digits. The ID is then unique within a IIdentifableNamespace.
If given an IIdentifiable, a IIdentifiableNamespace provider will provide the IIdentifiableNamespace of an IIdentifiable. This is done by determining the classtype of an IIdentifiable then using a lookup table that could be based on an xml configuration file.

An IIdentifiableNamespace has the property of NextID that gives the next unused ID number for a given type of IIdentifiable. The namespace also contains data on the structure of the data. An IIdentifiable can be added to a namespace.

An IIdentifiableNamespaceProvider has a method that takes in an IIdentifiable and, if recognized, produces an IIdentifiableNamespace for that IIdentifiable.
These providers might be things like DatabaseIdentifiableNamespaceProvider that returns an IIdentifiableNamespace with information on how to get that IIdentifiable from a database (i.e. the name of the database table).
The MemoryIdentifiableNamespaceProvider allows IDs to be issued to objects in memory.

Example: Getting data from a database table.
An IIdentifiableNamespaceProvider reads in an xml file containing a map of classtypes to database tables. When asked for the IIdentifiableNamespace for a type, an DatabaseIdentifiableNamespace is issued containing the database table name.
This table name is then used with an IIdentifiableNamespaceUpdater that has the methods of Add, Update, Read and Delete.
Providing an IIdentifiable to any of these methods will cause that IIdentifiable to be propagated to or from the database.
The DatabaseIdentifiableNamespace gets the next available ID by calling a stored procedure in the database that updates a counter for that namespace.
A namespace can be added to an IIdentifiableNamespaceProvider. In the case of a database, this adds a database table, then adds an entry in the table of table ID counts.
A namespace can also be deleted from an IIdentifiableNamespaceProvider.

NOTE: bulk operations will need to be provided, perhaps with some local caching and batching.


*** Data Entity Framework ***

On top of the IIdentifiable framework, a data entity framework will be built. This framework has all data items model as an Atomic IIdentifiable, with alias types stored in an alias type table, and aliases stored in a table with EntityID, AliasTypeID, AliasID and then a string value.
Properties are stored in columns of their own table. This allows the datatype of properties to be non-string, but requires data-definition language upgrades instead of just data upgrades.

These values have a created date, a creator ID, a last modified date and a last modifier ID.

*** Timeseries framework ***

In a timeseries, a double is defined by TimeseriesID, ValueFromDate, ValueToDate, a ValidFrom date and a ValidTo date. 
This format can be computed into the more familiar TimeseriesID, AsOfDate (ValueFromDate) and FeedDate.


*** Message Bus ***

A channel is a dotted name, just like namespaces. The bus is responsible for keeping track of what end-points are subscribed to a channel, then sending all incoming message sent on that channel to all recipients of that channel.
Objects needed:
1) A channel. Stored in a dictionary of channels keyed by name.
2) A message xsd that contains an element that can be anything, the payload.
3) A switchboard that takes in messages, parses out the routing info, then sends the message on its way!


*** Model Infrastructure ***

A model could be:
	* Nothing, just an object implementing IModel.
	* A configured model.
	* A logged model.
	* A serialized model.


*** Overall Framework ***

I want to build little tools (reports, analyses) that can be run daily by the Scheduler. These reports should also be included in the assemblies for CShell.
The main interface to the desk infrastructure should be CShell. The CShell should be able to put commands in over the message bus.


*** Source code, assembly and namespace layout ***



Duomo.Common.Lib
Duomo.Common.Lib.MATLAB